(function(){var a = function(b){if (!(this instanceof a)){return new a(b)}this.version = 1; this.support = ((typeof (File) !== "undefined") && (typeof (Blob) !== "undefined") && (typeof (FileList) !== "undefined") && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false)); if (!this.support){return(false)}var g = this; g.files = []; g.defaults = {chunkSize:1 * 1024 * 1024, forceChunkSize:false, simultaneousUploads:3, fileParameterName:"file", throttleProgressCallbacks:0.5, query:{}, headers:{}, preprocess:null, method:"multipart", prioritizeFirstAndLastChunk:false, target:"/", parameterNamespace:"", testChunks:true, generateUniqueIdentifier:null, maxChunkRetries:undefined, chunkRetryInterval:undefined, permanentErrors:[400, 404, 415, 500, 501], maxFiles:undefined, withCredentials:false, xhrTimeout:0, maxFilesErrorCallback:function(m, o){var n = g.getOpt("maxFiles"); alert("Please upload " + n + " file" + (n === 1?"":"s") + " at a time.")}, minFileSize:1, minFileSizeErrorCallback:function(m, n){alert(m.fileName || m.name + " is too small, please upload files larger than " + l.formatSize(g.getOpt("minFileSize")) + ".")}, maxFileSize:undefined, maxFileSizeErrorCallback:function(m, n){alert(m.fileName || m.name + " is too large, please upload files less than " + l.formatSize(g.getOpt("maxFileSize")) + ".")}, fileType:[], fileTypeErrorCallback:function(m, n){alert(m.fileName || m.name + " has type not allowed, please upload files of type " + g.getOpt("fileType") + ".")}}; g.opts = b || {}; g.getOpt = function(p){var n = this; if (p instanceof Array){var m = {}; l.each(p, function(o){m[o] = n.getOpt(o)}); return m}if (n instanceof e){if (typeof n.opts[p] !== "undefined"){return n.opts[p]} else{n = n.fileObj}}if (n instanceof f){if (typeof n.opts[p] !== "undefined"){return n.opts[p]} else{n = n.resumableObj}}if (n instanceof a){if (typeof n.opts[p] !== "undefined"){return n.opts[p]} else{return n.defaults[p]}}}; g.events = []; g.on = function(m, n){g.events.push(m.toLowerCase(), n)}; g.fire = function(){var m = []; for (var n = 0; n < arguments.length; n++){m.push(arguments[n])}var o = m[0].toLowerCase(); for (var n = 0; n <= g.events.length; n += 2){if (g.events[n] == o){g.events[n + 1].apply(g, m.slice(1))}if (g.events[n] == "catchall"){g.events[n + 1].apply(null, m)}}if (o == "fileerror"){g.fire("error", m[2], m[1])}if (o == "fileprogress"){g.fire("progress")}}; var l = {stopEvent:function(m){m.stopPropagation(); m.preventDefault()}, each:function(n, p){if (typeof (n.length) !== "undefined"){for (var m = 0; m < n.length; m++){if (p(n[m]) === false){return}}} else{for (m in n){if (p(m, n[m]) === false){return}}}}, generateUniqueIdentifier:function(o){var p = g.getOpt("generateUniqueIdentifier"); if (typeof p === "function"){return p(o)}var m = o.webkitRelativePath || o.fileName || o.name; var n = o.size; return(n + "-" + m.replace(/[^0-9a-zA-Z_-]/img, ""))}, contains:function(o, n){var m = false; l.each(o, function(p){if (p == n){m = true; return false}return true}); return m}, formatSize:function(m){if (m < 1024){return m + " bytes"} else{if (m < 1024 * 1024){return(m / 1024).toFixed(0) + " KB"} else{if (m < 1024 * 1024 * 1024){return(m / 1024 / 1024).toFixed(1) + " MB"} else{return(m / 1024 / 1024 / 1024).toFixed(1) + " GB"}}}}, getTarget:function(n){var m = g.getOpt("target"); if (m.indexOf("?") < 0){m += "?"} else{m += "&"}return m + n.join("&")}}; var c = function(m){l.stopEvent(m); if (m.dataTransfer && m.dataTransfer.items){k(m.dataTransfer.items, m)} else{if (m.dataTransfer && m.dataTransfer.files){k(m.dataTransfer.files, m)}}}; var j = function(m){m.preventDefault()}; var k = function(m, n, q, u){if (!q){q = {total:0, files:[], event:n}}d(m.length, q); for (var p = 0; p < m.length; p++){var o = m[p]; var t, r; if (o.isFile || o.isDirectory){t = o} else{if (o.getAsEntry){t = o.getAsEntry()} else{if (o.webkitGetAsEntry){t = o.webkitGetAsEntry()} else{if (typeof o.getAsFile === "function"){i(o.getAsFile(), q, u); continue} else{if (File && o instanceof File){i(o, q, u); continue} else{d( - 1, q); continue}}}}}if (!t){d( - 1, q)} else{if (t.isFile){t.file(function(v){i(v, q, u)}, function(v){console.warn(v)})} else{if (t.isDirectory){r = t.createReader(); var s = function(v){return function(w){k(w, n, q, v); d( - 1, q)}}; r.readEntries(s(t.fullPath), function(v){console.warn(v)})}}}}}; var d = function(n, m){m.total += n; if (m.files.length === m.total){h(m.files, m.event)}}; var i = function(n, m, o){if (o){n.relativePath = o + "/" + n.name}m.files.push(n); if (m.files.length === m.total){h(m.files, m.event)}}; var h = function(m, p){var r = 0; var q = g.getOpt(["maxFiles", "minFileSize", "maxFileSize", "maxFilesErrorCallback", "minFileSizeErrorCallback", "maxFileSizeErrorCallback", "fileType", "fileTypeErrorCallback"]); if (typeof (q.maxFiles) !== "undefined" && q.maxFiles < (m.length + g.files.length)){if (q.maxFiles === 1 && g.files.length === 1 && m.length === 1){g.removeFile(g.files[0])} else{q.maxFilesErrorCallback(m, r++); return false}}var n = []; l.each(m, function(u){var x = u.name; if (q.fileType.length > 0){var t = false; for (var s in q.fileType){var w = "." + q.fileType[s]; if (x.indexOf(w, x.length - w.length) !== - 1){t = true; break}}if (!t){q.fileTypeErrorCallback(u, r++); return false}}if (typeof (q.minFileSize) !== "undefined" && u.size < q.minFileSize){q.minFileSizeErrorCallback(u, r++); return false}if (typeof (q.maxFileSize) !== "undefined" && u.size > q.maxFileSize){q.maxFileSizeErrorCallback(u, r++); return false}function v(y){if (!g.getFromUniqueIdentifier(y)){(function(){u.uniqueIdentifier = y; var z = new f(g, u, y); g.files.push(z); n.push(z); z.container = (typeof p != "undefined"?p.srcElement:null); window.setTimeout(function(){g.fire("fileAdded", z, p)}, 0)})()}}var o = l.generateUniqueIdentifier(u); if (o && typeof o.done === "function" && typeof o.fail === "function"){o.done(function(y){v(y)}).fail(function(){v()})} else{v(o)}}); window.setTimeout(function(){g.fire("filesAdded", n)}, 0)}; function f(q, n, m){var o = this; o.opts = {}; o.getOpt = q.getOpt; o._prevProgress = 0; o.resumableObj = q; o.file = n; o.fileName = n.fileName || n.name; o.size = n.size; o.relativePath = n.webkitRelativePath || n.relativePath || o.fileName; o.lastModifiedDate = n.lastModifiedDate; o.uniqueIdentifier = m; o._pause = false; o.container = ""; var r = m !== undefined; var p = function(t, s){switch (t){case"progress":o.resumableObj.fire("fileProgress", o); break; case"error":o.abort(); r = true; o.chunks = []; o.resumableObj.fire("fileError", o, s); break; case"success":if (r){return}o.resumableObj.fire("fileProgress", o); if (o.isComplete()){o.resumableObj.fire("fileSuccess", o, s)}break; case"retry":o.resumableObj.fire("fileRetry", o); break}}; o.chunks = []; o.abort = function(){var s = 0; l.each(o.chunks, function(t){if (t.status() == "uploading"){t.abort(); s++}}); if (s > 0){o.resumableObj.fire("fileProgress", o)}}; o.cancel = function(){var s = o.chunks; o.chunks = []; l.each(s, function(t){if (t.status() == "uploading"){t.abort(); o.resumableObj.uploadNextChunk()}}); o.resumableObj.removeFile(o); o.resumableObj.fire("fileProgress", o)}; o.retry = function(){o.bootstrap(); var s = false; o.resumableObj.on("chunkingComplete", function(){if (!s){o.resumableObj.upload()}s = true})}; o.bootstrap = function(){o.abort(); r = false; o.chunks = []; o._prevProgress = 0; var s = o.getOpt("forceChunkSize")?Math.ceil:Math.floor; var t = Math.max(s(o.file.size / o.getOpt("chunkSize")), 1); for (var u = 0; u < t; u++){(function(v){window.setTimeout(function(){o.chunks.push(new e(o.resumableObj, o, v, p)); o.resumableObj.fire("chunkingProgress", o, v / t)}, 0)})(u)}window.setTimeout(function(){o.resumableObj.fire("chunkingComplete", o)}, 0)}; o.progress = function(){if (r){return(1)}var t = 0; var s = false; l.each(o.chunks, function(u){if (u.status() == "error"){s = true}t += u.progress(true)}); t = (s?1:(t > 0.99999?1:t)); t = Math.max(o._prevProgress, t); o._prevProgress = t; return(t)}; o.isUploading = function(){var s = false; l.each(o.chunks, function(t){if (t.status() == "uploading"){s = true; return(false)}}); return(s)}; o.isComplete = function(){var s = false; l.each(o.chunks, function(u){var t = u.status(); if (t == "pending" || t == "uploading" || u.preprocessState === 1){s = true; return(false)}}); return(!s)}; o.pause = function(s){if (typeof (s) === "undefined"){o._pause = (o._pause?false:true)} else{o._pause = s}}; o.isPaused = function(){return o._pause}; o.resumableObj.fire("chunkingStart", o); o.bootstrap(); return(this)}function e(o, m, p, r){var n = this; n.opts = {}; n.getOpt = o.getOpt; n.resumableObj = o; n.fileObj = m; n.fileObjSize = m.size; n.fileObjType = m.file.type; n.offset = p; n.callback = r; n.lastProgressCallback = (new Date); n.tested = false; n.retries = 0; n.pendingRetry = false; n.preprocessState = 0; var q = n.getOpt("chunkSize"); n.loaded = 0; n.startByte = n.offset * q; n.endByte = Math.min(n.fileObjSize, (n.offset + 1) * q); if (n.fileObjSize - n.endByte < q && !n.getOpt("forceChunkSize")){n.endByte = n.fileObjSize}n.xhr = null; n.test = function(){n.xhr = new XMLHttpRequest(); var u = function(x){n.tested = true; var w = n.status(); if (w == "success"){n.callback(w, n.message()); n.resumableObj.uploadNextChunk()} else{n.send()}}; n.xhr.addEventListener("load", u, false); n.xhr.addEventListener("error", u, false); n.xhr.addEventListener("timeout", u, false); var v = []; var t = n.getOpt("parameterNamespace"); var s = n.getOpt("query"); if (typeof s == "function"){s = s(n.fileObj, n)}l.each(s, function(x, w){v.push([encodeURIComponent(t + x), encodeURIComponent(w)].join("="))}); v.push([t + "resumableChunkNumber", encodeURIComponent(n.offset + 1)].join("=")); v.push([t + "resumableChunkSize", encodeURIComponent(n.getOpt("chunkSize"))].join("=")); v.push([t + "resumableCurrentChunkSize", encodeURIComponent(n.endByte - n.startByte)].join("=")); v.push([t + "resumableTotalSize", encodeURIComponent(n.fileObjSize)].join("=")); v.push([t + "resumableType", encodeURIComponent(n.fileObjType)].join("=")); v.push([t + "resumableIdentifier", encodeURIComponent(n.fileObj.uniqueIdentifier)].join("=")); v.push([t + "resumableFilename", encodeURIComponent(n.fileObj.fileName)].join("=")); v.push([t + "resumableRelativePath", encodeURIComponent(n.fileObj.relativePath)].join("=")); v.push([t + "resumableTotalChunks", encodeURIComponent(n.fileObj.chunks.length)].join("=")); n.xhr.open("GET", l.getTarget(v)); n.xhr.timeout = n.getOpt("xhrTimeout"); n.xhr.withCredentials = n.getOpt("withCredentials"); l.each(n.getOpt("headers"), function(x, w){n.xhr.setRequestHeader(x, w)}); n.xhr.send(null)}; n.preprocessFinished = function(){n.preprocessState = 2; n.send()}; n.send = function(){var v = n.getOpt("preprocess"); if (typeof v === "function"){switch (n.preprocessState){case 0:v(n); n.preprocessState = 1; return; case 1:return; case 2:break}}if (n.getOpt("testChunks") && !n.tested){n.test(); return}n.xhr = new XMLHttpRequest(); n.xhr.upload.addEventListener("progress", function(C){if ((new Date) - n.lastProgressCallback > n.getOpt("throttleProgressCallbacks") * 1000){n.callback("progress"); n.lastProgressCallback = (new Date)}n.loaded = C.loaded || 0}, false); n.loaded = 0; n.pendingRetry = false; n.callback("progress"); var w = function(D){var C = n.status(); if (C == "success" || C == "error"){n.callback(C, n.message()); n.resumableObj.uploadNextChunk()} else{n.callback("retry", n.message()); n.abort(); n.retries++; var E = n.getOpt("chunkRetryInterval"); if (E !== undefined){n.pendingRetry = true; setTimeout(n.send, E)} else{n.send()}}}; n.xhr.addEventListener("load", w, false); n.xhr.addEventListener("error", w, false); n.xhr.addEventListener("timeout", w, false); var z = {resumableChunkNumber:n.offset + 1, resumableChunkSize:n.getOpt("chunkSize"), resumableCurrentChunkSize:n.endByte - n.startByte, resumableTotalSize:n.fileObjSize, resumableType:n.fileObjType, resumableIdentifier:n.fileObj.uniqueIdentifier, resumableFilename:n.fileObj.fileName, resumableRelativePath:n.fileObj.relativePath, resumableTotalChunks:n.fileObj.chunks.length}; var t = n.getOpt("query"); if (typeof t == "function"){t = t(n.fileObj, n)}l.each(t, function(D, C){z[D] = C}); var s = (n.fileObj.file.slice?"slice":(n.fileObj.file.mozSlice?"mozSlice":(n.fileObj.file.webkitSlice?"webkitSlice":"slice"))), B = n.fileObj.file[s](n.startByte, n.endByte), x = null, y = n.getOpt("target"); var A = n.getOpt("parameterNamespace"); if (n.getOpt("method") === "octet"){x = B; var u = []; l.each(z, function(D, C){u.push([encodeURIComponent(A + D), encodeURIComponent(C)].join("="))}); y = l.getTarget(u)} else{x = new FormData(); l.each(z, function(D, C){x.append(A + D, C)}); x.append(A + n.getOpt("fileParameterName"), B)}n.xhr.open("POST", y); n.xhr.timeout = n.getOpt("xhrTimeout"); n.xhr.withCredentials = n.getOpt("withCredentials"); l.each(n.getOpt("headers"), function(D, C){n.xhr.setRequestHeader(D, C)}); n.xhr.send(x)}; n.abort = function(){if (n.xhr){n.xhr.abort()}n.xhr = null}; n.status = function(){if (n.pendingRetry){return("uploading")} else{if (!n.xhr){return("pending")} else{if (n.xhr.readyState < 4){return("uploading")} else{if (n.xhr.status == 200){return("success")} else{if (l.contains(n.getOpt("permanentErrors"), n.xhr.status) || n.retries >= n.getOpt("maxChunkRetries")){return("error")} else{n.abort(); return("pending")}}}}}}; n.message = function(){return(n.xhr?n.xhr.responseText:"")}; n.progress = function(v){if (typeof (v) === "undefined"){v = false}var t = (v?(n.endByte - n.startByte) / n.fileObjSize:1); if (n.pendingRetry){return(0)}var u = n.status(); switch (u){case"success":case"error":return(1 * t); case"pending":return(0 * t); default:return(n.loaded / (n.endByte - n.startByte) * t)}}; return(this)}g.uploadNextChunk = function(){var n = false; if (g.getOpt("prioritizeFirstAndLastChunk")){l.each(g.files, function(o){if (o.chunks.length && o.chunks[0].status() == "pending" && o.chunks[0].preprocessState === 0){o.chunks[0].send(); n = true; return(false)}if (o.chunks.length > 1 && o.chunks[o.chunks.length - 1].status() == "pending" && o.chunks[o.chunks.length - 1].preprocessState === 0){o.chunks[o.chunks.length - 1].send(); n = true; return(false)}}); if (n){return(true)}}l.each(g.files, function(o){if (o.isPaused() === false){l.each(o.chunks, function(p){if (p.status() == "pending" && p.preprocessState === 0){p.send(); n = true; return(false)}})}if (n){return(false)}}); if (n){return(true)}var m = false; l.each(g.files, function(o){if (!o.isComplete()){m = true; return(false)}}); if (!m){g.fire("complete")}return(false)}; g.assignBrowse = function(m, n){if (typeof (m.length) == "undefined"){m = [m]}l.each(m, function(p){var o; if (p.tagName === "INPUT" && p.type === "file"){o = p} else{o = document.createElement("input"); o.setAttribute("type", "file"); o.style.display = "none"; p.addEventListener("click", function(){o.style.opacity = 0; o.style.display = "block"; o.focus(); o.click(); o.style.display = "none"}, false); p.appendChild(o)}var q = g.getOpt("maxFiles"); if (typeof (q) === "undefined" || q != 1){o.setAttribute("multiple", "multiple")} else{o.removeAttribute("multiple")}if (n){o.setAttribute("webkitdirectory", "webkitdirectory")} else{o.removeAttribute("webkitdirectory")}o.addEventListener("change", function(r){h(r.target.files, r); r.target.value = ""}, false)})}; g.assignDrop = function(m){if (typeof (m.length) == "undefined"){m = [m]}l.each(m, function(n){n.addEventListener("dragover", j, false); n.addEventListener("drop", c, false)})}; g.unAssignDrop = function(m){if (typeof (m.length) == "undefined"){m = [m]}l.each(m, function(n){n.removeEventListener("dragover", j); n.removeEventListener("drop", c)})}; g.isUploading = function(){var m = false; l.each(g.files, function(n){if (n.isUploading()){m = true; return(false)}}); return(m)}; g.upload = function(){if (g.isUploading()){return}g.fire("uploadStart"); for (var m = 1; m <= g.getOpt("simultaneousUploads"); m++){g.uploadNextChunk()}}; g.pause = function(){l.each(g.files, function(m){m.abort()}); g.fire("pause")}; g.cancel = function(){for (var m = g.files.length - 1; m >= 0; m--){g.files[m].cancel()}g.fire("cancel")}; g.progress = function(){var n = 0; var m = 0; l.each(g.files, function(o){n += o.progress() * o.size; m += o.size}); return(m > 0?n / m:0)}; g.addFile = function(m, n){h([m], n)}; g.removeFile = function(n){for (var m = g.files.length - 1; m >= 0; m--){if (g.files[m] === n){g.files.splice(m, 1)}}}; g.getFromUniqueIdentifier = function(m){var n = false; l.each(g.files, function(o){if (o.uniqueIdentifier == m){n = o}}); return(n)}; g.getSize = function(){var m = 0; l.each(g.files, function(n){m += n.size}); return(m)}; return(this)}; if (typeof module != "undefined"){module.exports = a} else{if (typeof define === "function" && define.amd){define(function(){return a})} else{window.Resumable = a}}})();